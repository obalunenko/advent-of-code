// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/2019/day01.txt
// data/2019/day02.txt
// data/2019/day03.txt
// data/2019/day04.txt

package input


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataData2019Day01Txt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x91\xc1\x91\x05\x41\x08\x42\xef\x44\x23\x2d\x8a\xe6\x9f\xd8\x96\xb3\x55\xff\xe8\x8c\x0d\x3c\xec\x54\x15\x28\xa7\x89\xc9\x30\x51\x56\x07\xac\xdc\x07\xaa\x32\x12\xcc\xe0\x10\x95\x8c\x07\xbe\x08\x27\x36\x49\x82\x92\x4c\x30\x2a\x9f\x41\xb6\xba\xd1\x7e\xef\xf6\xde\xe8\xb4\x3b\xd6\xd8\x17\x14\x48\xe9\x0d\xb6\xbd\x0d\x26\xa9\x00\x83\x1a\x62\xbc\x95\xdf\xc0\x82\xcb\xb9\x68\xbd\x4e\xac\x5e\x19\x54\xe8\x35\xfa\xe5\x18\x23\xb5\xc0\x50\xc9\x60\x64\xdd\xfb\xe5\x23\xf8\x32\x83\x68\xed\x26\xa8\xac\x2a\x54\x3d\xf5\xc5\xde\xb9\x6c\x75\xd6\x6a\xfa\x16\xd6\x61\x74\xbc\x29\x4c\x16\x0d\xa7\xe7\x9d\xe6\xe7\xa0\xa8\x68\x78\x14\x71\x43\xfb\x2a\x61\xe7\x5c\x04\xc7\x01\x8f\x17\x8c\xf0\xb9\xe6\xfa\xb0\xca\x1a\x74\xc5\x97\x27\x62\xce\xcf\x4f\x8b\x2a\x89\xb7\x90\xfc\x4a\x3f\xa2\xcd\x76\x63\x99\x73\xf5\xc4\x72\x3e\x88\x1e\x30\x9e\xf2\x7c\x35\x61\xcc\x73\xdf\x5b\x65\x19\xfd\x76\x03\x53\xf4\xf7\x69\x0e\x6c\xd9\x0d\x72\x2d\x61\xa2\xf5\xd5\x5c\x0f\xb3\x79\x11\xb3\xe9\xc1\x16\x5d\xe0\x09\x37\x8a\xa7\x52\xae\x43\x25\x53\x86\x37\x69\x6c\x9d\xc9\x94\xbb\xc0\x2b\xe4\x5a\xae\xff\x03\x86\xf5\x7e\x93\x36\x33\xae\x9f\xbc\x0d\x6f\x0c\x98\x1b\xba\x5f\x99\x21\x6c\x34\x85\x7a\xe4\x1e\x30\x99\x17\x71\x0e\xff\x55\xe7\x77\xc4\xcc\x73\x99\xb7\xf5\x17\x00\x00\xff\xff\xe9\xd5\xab\x4a\x8e\x02\x00\x00")

func bindataData2019Day01TxtBytes() ([]byte, error) {
	return bindataRead(
		_bindataData2019Day01Txt,
		"data/2019/day01.txt",
	)
}



func bindataData2019Day01Txt() (*asset, error) {
	bytes, err := bindataData2019Day01TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/2019/day01.txt",
		size: 654,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1604484511, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataData2019Day02Txt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x90\xc1\x11\x00\x21\x08\xc4\x1a\xda\x87\x1c\x22\xd2\x7f\x63\x37\x59\x3f\x04\x61\x02\x8c\xa1\xa5\xa5\x54\x28\xf4\x99\xa9\x6d\x96\xeb\x9f\x62\xd1\x1c\x7d\x1a\xc3\xb5\x34\x5b\xa1\x03\x12\xf9\x80\xac\xd7\xce\x52\x0e\xd3\x86\x01\x1b\x69\x27\x8d\x8d\x34\xa0\xd8\x49\x48\x55\x91\x96\x53\x36\xd5\x90\x1e\xce\x38\xa9\xa3\xd3\x9e\x7f\x5a\x6d\x09\x74\xb9\xd6\xa5\x9e\x57\x1b\x5d\xf6\x5c\x8c\xdb\xae\xdd\xd6\x84\xaf\x9c\xd0\x60\x4c\xf1\x78\x06\x58\x5e\xf2\xb8\x90\x88\x9f\x22\xd0\x88\xfc\xc3\x70\x54\x6c\xfe\xea\x0f\x00\x00\xff\xff\xb1\xc8\x96\x9a\x31\x01\x00\x00")

func bindataData2019Day02TxtBytes() ([]byte, error) {
	return bindataRead(
		_bindataData2019Day02Txt,
		"data/2019/day02.txt",
	)
}



func bindataData2019Day02Txt() (*asset, error) {
	bytes, err := bindataData2019Day02TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/2019/day02.txt",
		size: 305,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1604484511, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataData2019Day03Txt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x96\x31\xd2\x2c\x21\x08\x84\xf3\x77\x16\x02\x45\x50\xc8\x0d\x8d\xac\xf2\xfe\x57\x79\xf5\x31\xfb\x67\x5b\xb3\x33\x2a\x4d\xf7\x87\xb7\xb7\x16\xf2\xc6\x98\x72\x7b\x98\xec\x9c\x4b\xae\x79\x97\xbd\x4c\xe5\xe8\x70\x79\xda\x53\xae\x2f\xd9\x36\x52\x6e\xcc\x94\xa7\x6d\xc9\xf1\x65\xf2\xe6\x6a\x72\xa2\x85\xec\xb9\x5c\x8e\xb6\x21\x7b\xf0\x4c\x57\xca\x33\x0b\x39\x91\x4d\x9e\xe6\x92\xcb\xb3\x3d\xfb\x90\x63\xbd\xcb\xf6\xd1\xe4\x8c\xa5\xb2\x23\xe4\x66\x4c\x3e\x30\xb9\xa3\xa7\xec\x74\x39\x23\x9c\x75\x4d\x6e\xc4\x92\x17\xee\x72\x57\x9a\xbc\x15\x43\xee\x1c\x43\x5e\x9f\x9c\x24\x96\x6c\x37\x97\xb3\x74\xca\xee\x39\xe5\xce\xe8\xf2\x66\x4b\xb9\x73\xf1\x6d\x74\xb9\xdd\x87\xec\xa5\x26\x67\x0e\x79\x6a\x53\xee\xb0\x21\x6f\x74\x97\xeb\xd1\xe4\xc5\x52\x39\xde\xa7\xbc\x74\xb9\x36\x87\xec\x60\x8d\x94\xb7\xa8\xde\xad\xfd\x6a\xb6\x61\xb2\x67\xa6\x9c\xee\x21\xcf\x16\xc7\x1d\xb2\x2d\x86\x9c\x61\x6c\xde\xe5\xe6\x18\xb2\x75\xa2\x5b\x9f\xb2\x3d\x52\xae\x45\xc8\xee\x3c\x4b\x6a\xf7\x61\x72\x32\x5d\xb6\xae\x25\x87\x4a\xf7\xf4\x25\x77\x6a\xc8\x1e\xaa\x72\x97\x0f\x79\x81\x6e\x4a\x93\x74\xf0\xef\x9a\xe8\xd6\xe4\x78\xa3\x6f\x2e\xc7\x5a\x47\x5e\x36\xe3\x48\x83\x0f\xba\x4f\x79\x3e\x5c\xee\x9c\x86\xbe\x4b\x8e\x7a\x47\xb8\x90\x33\x5c\x3f\x69\xce\x1a\x26\x4f\x29\xac\xaf\x25\x3b\x1b\xdf\x76\x93\x97\x19\x72\x7a\x53\xd9\xdd\x58\xd9\x82\x32\xa6\x9c\xa4\x0a\xce\x99\xa6\xf2\x0c\xcd\xc3\x97\xbc\x31\x55\xee\xc8\x90\x17\x13\x09\x53\xde\xf0\xa0\x35\x9c\x6e\xd0\x06\x8e\x3e\x38\x71\xef\x7c\x5a\x9a\x63\x30\xfa\x73\x93\xfa\x47\xca\x31\x56\xf3\x39\x31\x5f\x93\xd7\x1b\xbf\x1a\xf5\xa7\xca\xc1\x06\x96\x29\x97\xc5\xdf\xf4\x21\x67\xf1\xe7\xd4\x45\x9b\x78\xcd\x90\x84\x35\xfa\x90\xab\xbc\x65\x83\xee\x36\x79\xbe\xa8\x45\x1d\xb3\x4e\x39\x31\x17\x95\xa6\xdc\x4e\x5b\x11\xe3\x4e\x27\x0f\x91\x72\x52\x7f\xce\xb8\x48\x38\x75\xd2\x91\x2e\xdb\x14\x59\xf9\x53\x17\x7b\xad\x2e\x3b\xaa\x82\x64\x87\x85\x49\xe8\x60\xa3\x5b\x43\x76\x8f\x25\x77\x34\x6a\xa1\xe7\x5f\xcc\xfa\xfa\xe9\xe6\xeb\xaf\xd2\x24\x0e\xcb\x5c\x5e\x58\xc3\xf1\x29\xaf\x5c\xe8\x0b\xb3\xba\x91\xb3\x90\x9d\x1c\xdd\xfa\x42\x42\x0a\x73\x47\xaf\x21\x27\xf9\x15\x3a\xe4\xae\x4e\xba\x26\x2e\x35\xa7\x30\x32\x12\x8d\x78\xcb\x35\xed\xf2\x88\x79\x39\x78\xe2\xcd\xd5\x43\xb6\xb9\xcb\x99\xa5\xb9\xd2\x38\x43\xea\x46\xe3\x2c\xe9\x03\x5f\x28\xc6\x19\x2a\x17\x5d\x36\xc7\x64\xfd\xa1\xce\x39\x06\x35\xe0\xcc\xe9\xb2\x2d\x4b\x08\x47\x7e\xcc\xd7\x52\x76\x28\x2d\x4f\xb2\x41\xf2\xc7\x2f\x6f\x83\xf5\xbd\x77\x39\x4a\x2c\xa3\x32\xc8\x21\x01\xd4\x29\x40\xe8\x04\x10\x18\xa8\x23\xb5\x51\x4b\x1a\xd0\x22\x5f\x0b\x8f\x74\x6a\x40\xb4\x6b\x8a\x21\x08\xf7\x08\x93\xd7\x03\xa6\x8c\x90\xd7\x0d\x31\x27\x3e\xff\x79\x7f\xa3\xe3\x99\x2a\x5b\xdd\xe4\xae\x82\xe1\xa2\x99\xe4\x11\xd7\xdf\xa1\xc0\x43\x0e\x69\xda\xc0\xe7\xcc\x09\xf7\xea\x44\xf4\xc3\xca\x05\xec\x5e\xf6\xad\x66\x45\xe0\x38\x32\x03\xd9\xea\x68\x59\x50\xc4\xa1\xe9\x80\xaa\x79\x1d\xe8\xf0\x7c\xaf\x90\x43\x27\x9e\xe1\xd5\x4c\x94\x29\x99\xf1\x16\xa6\x75\x9f\xdf\xee\xb7\x8f\xfe\xef\x64\x42\x32\x45\x62\xd2\xaa\x34\x6c\x34\x23\xf3\x72\x67\xba\xbc\x35\x5d\x6e\xaf\xca\xa6\x71\xfa\x32\x33\xbe\xc2\xaf\x03\x8d\x75\xc9\xd6\xd6\x3e\xde\xef\xc0\x9c\xee\x29\x9b\xf6\x5f\x90\xf3\xb2\x13\x39\xff\x65\xf9\x1a\xe8\xb5\x56\xcb\x81\x46\xc4\x56\x96\x43\xca\xd3\xd9\x5f\xc1\x5f\x60\xbf\x0e\x9a\x98\x15\xa0\xed\xce\x36\x61\xc4\x94\x33\x89\x30\x7c\xba\x1f\xe7\x21\xf9\xd0\x64\xce\xd8\xcf\xff\x0b\x87\x33\x0e\xde\xe2\xbd\x72\x3d\x58\xb8\x0b\xd1\x2a\xb0\xdf\xf1\x50\x8d\x10\x29\x9d\x85\x1e\x3b\x3f\x48\xfa\x37\x53\x4e\x24\x03\x27\x96\x9c\xec\x74\x5b\xae\xa6\xc9\x0e\xb0\x05\x81\xb7\x87\x7d\xf0\x7d\x41\x0f\x02\x70\x68\x53\x90\xc3\x0c\xa4\xae\x82\x6f\x91\x74\x7d\xf5\x9d\x8e\x72\x16\x20\x1a\x6a\xaa\x16\x85\x78\x06\x5d\xbf\x52\x19\x4b\x8e\xe9\xbf\xd9\x3a\x8a\x34\x5e\x40\xfa\xe0\xa3\x18\x21\xe5\x04\x0d\x5c\xa4\x6b\x14\x5a\x4d\xce\xca\x6f\xea\x1e\x45\xfa\x8e\x25\xf8\xe4\xad\xd6\xe4\x46\xe9\x07\x46\x61\xca\xa6\x2f\xe0\x75\x93\x86\x59\xaa\x80\x7d\xa5\xf3\x51\x9a\x41\x56\x67\x62\x95\x7a\x2b\x95\xe3\xb0\x43\x0d\x5d\x78\x4e\xfd\x07\xab\x59\x31\xab\x92\xa7\x72\xa2\x18\xe7\x00\x30\x41\x06\x66\x60\x0e\xef\xf9\x35\x19\x52\xf8\xfa\x8d\x9d\x22\x76\x24\x93\xcd\x70\x29\xb0\x01\x0b\x20\x7a\x63\x88\xbb\x46\x8d\x55\xfb\x86\xe2\x0b\x06\x46\x66\xb9\xb7\x13\x50\x78\xda\xe5\xae\xc9\xc4\xcc\x4e\x54\x9d\x34\x36\x26\xb8\x32\x75\x89\x06\x9f\x96\x05\xa7\x73\x72\xd8\x42\x94\x36\xde\x3c\x1e\x43\x5e\xb5\xbb\xe3\xa8\xde\x60\x05\x2d\x05\x7e\x27\x6b\x50\x16\xf8\x8d\x34\x95\x2d\x3e\xe1\x94\x41\xec\x20\x8b\x4b\xcd\x07\xea\x1e\xf3\xf7\xfa\x54\x79\xa3\xc1\x50\xc0\x0e\x56\x69\xf4\xe3\x1e\xc3\x14\x7b\xca\xea\xd6\xe1\x1f\xf6\x40\xd2\x44\x8e\xc2\x43\xc7\x57\x0c\xc1\xc5\x50\x89\x55\x67\xe8\xd8\x09\x2f\x13\xe1\xc4\x30\x45\x96\x5e\x41\xcc\x42\x46\x23\x9c\x30\xac\x68\x56\x69\x66\xae\x98\x53\xc9\x62\xfb\x80\x93\x56\x7d\x1e\x1f\x6e\x9e\x9b\xca\xd5\xde\xb9\x35\x2d\x56\x81\xba\xd0\x8b\x5b\xcf\x1b\x9c\x33\xc8\x24\x57\x9c\xba\x17\xbd\xc4\xc6\x51\x90\x8b\x52\x55\x59\x85\x1b\x17\x36\xa8\x59\x8e\xdb\x83\xf9\x5a\x28\x2e\x88\x14\x13\x74\x54\x4e\x92\xab\x11\xc7\xcb\xda\x82\x0b\x0e\xa3\xa3\xee\x0d\xbd\x96\xa3\x5c\x57\x06\x16\xd7\x3b\xe3\x96\x54\xb8\x8f\x24\x1f\x39\xff\xd2\xc3\x00\x02\x34\xdb\x48\x54\x05\x96\x6d\x3b\xd0\x5c\x5c\x4d\x6a\x3e\x7c\x9e\x03\xe3\x3e\x00\x15\x3f\xd6\xfa\xae\x8d\x6f\x32\x62\xd8\x7a\x87\x53\xb6\x42\x02\xae\xa8\x51\x57\x4f\x85\x76\xca\xdd\x88\x1d\x18\x0a\xbb\xe8\x3a\x8b\x98\xb4\x9a\x72\xb8\xd5\x9c\x1e\x95\x11\x50\x0d\xd1\xb3\x7c\x00\x09\x89\x41\x58\xff\xae\x2b\xd7\x26\x9a\xb4\xca\xfd\x77\xd3\x3b\x1d\xad\xb9\x45\xdd\x5e\x3d\xc6\x70\x90\x60\x95\x6d\xfb\xff\x00\x00\x00\xff\xff\xd6\x7d\x90\x99\x7e\x0b\x00\x00")

func bindataData2019Day03TxtBytes() ([]byte, error) {
	return bindataRead(
		_bindataData2019Day03Txt,
		"data/2019/day03.txt",
	)
}



func bindataData2019Day03Txt() (*asset, error) {
	bytes, err := bindataData2019Day03TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/2019/day03.txt",
		size: 2942,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1604484511, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataData2019Day04Txt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\x34\xb0\x30\x31\x35\xd7\x35\x35\x33\x32\x30\x31\x04\x04\x00\x00\xff\xff\xdd\xb6\xac\x99\x0d\x00\x00\x00")

func bindataData2019Day04TxtBytes() ([]byte, error) {
	return bindataRead(
		_bindataData2019Day04Txt,
		"data/2019/day04.txt",
	)
}



func bindataData2019Day04Txt() (*asset, error) {
	bytes, err := bindataData2019Day04TxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "data/2019/day04.txt",
		size: 13,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1604484511, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"data/2019/day01.txt": bindataData2019Day01Txt,
	"data/2019/day02.txt": bindataData2019Day02Txt,
	"data/2019/day03.txt": bindataData2019Day03Txt,
	"data/2019/day04.txt": bindataData2019Day04Txt,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"data": {Func: nil, Children: map[string]*bintree{
		"2019": {Func: nil, Children: map[string]*bintree{
			"day01.txt": {Func: bindataData2019Day01Txt, Children: map[string]*bintree{}},
			"day02.txt": {Func: bindataData2019Day02Txt, Children: map[string]*bintree{}},
			"day03.txt": {Func: bindataData2019Day03Txt, Children: map[string]*bintree{}},
			"day04.txt": {Func: bindataData2019Day04Txt, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
